<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <!-- ========== Rate (Estimate) Services ========== -->

    <service verb="get" noun="OrderShippingRate">
        <!-- see: https://goshippo.com/docs/reference#shipments -->
        <implements service="mantle.shipment.CarrierServices.get#OrderShippingRate"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not getting rates"/><return/></if>

            <if condition="!packageInfoList"><return message="No package info found, not getting Shippo shipping rates"/></if>

            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <set field="fromPartyId" from="orderPart.vendorPartyId"/>
            <if condition="!fromPartyId"><return message="Vendor party not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <set field="toPartyId" from="orderPart.customerPartyId"/>
            <if condition="!toPartyId"><return message="To party not set on order part ${orderId}:${orderPartSeqId}"/></if>

            <set field="carrierPartyId" from="carrierPartyId ?: orderPart.carrierPartyId"/>
            <if condition="!carrierPartyId || carrierPartyId == '_NA_'"><return message="Carrier not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: orderPart.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId"><return message="Shipment method not set on order part ${orderId}:${orderPartSeqId}"/></if>

            <!-- address_from -->
            <if condition="!orderPart.facilityId"><return message="Facility not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                          in-map="[facilityId:orderPart.facilityId]"/>
            <if condition="!facOriginOut.postalContactMechId"><return message="Facility ${orderPart.facilityId} on order part ${orderId}:${orderPartSeqId} has no ship origin address"/></if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="facOriginOut.postalContactMechId"/></entity-find-one>
            <if condition="!originPostalAddress.shipGatewayAddressId">
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="fromValidateOut"
                              in-map="[contactMechId:facOriginOut.postalContactMechId, partyId:fromPartyId, facilityId:orderPart.facilityId,
                            shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                    <field-map field-name="contactMechId" from="fromValidateOut.contactMechId"/></entity-find-one>
            </if>

            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech">
                <field-map field-name="contactMechId" from="originPostalAddress.contactMechId"/></entity-find-one>
            <if condition="originPostalAddress.shipGatewayAddressId &amp;&amp; originContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then>
                <set field="address_from" from="originPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="originAddrOut"
                              in-map="[postalAddress:originPostalAddress, partyId:fromPartyId, isOrigin:true]"/>
                <set field="address_from" from="originAddrOut.addressMap"/>
            </else></if>

            <!-- address_to -->
            <if condition="!orderPart.postalContactMechId"><return message="Address not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one>
            <if condition="!destPostalAddress.shipGatewayAddressId">
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                              in-map="[contactMechId:orderPart.postalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <set field="postalContactMechId" from="toValidateOut.contactMechId"/>
                <set field="orderPart.postalContactMechId" from="postalContactMechId"/>
                <entity-update value-field="orderPart"/>

                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                    <field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one>
            </if>

            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech">
                <field-map field-name="contactMechId" from="destPostalAddress.contactMechId"/></entity-find-one>
            <if condition="destPostalAddress.shipGatewayAddressId &amp;&amp; destContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then>
                <set field="address_to" from="destPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="destAddrOut"
                              in-map="[postalAddress:destPostalAddress, partyId:toPartyId, isOrigin:false]"/>
                <set field="address_to" from="destAddrOut.addressMap"/>
            </else></if>



            <!-- NOTE: because Shippo treats multiple parcels as a multi-piece shipment (only supported by UPS, FedEx?) do one call per package -->
            <!-- parcels -->
            <set field="shippingTotal" from="0.0"/>
            <set field="servicelevelMap" from="null"/>
            <iterate list="packageInfoList" entry="packageInfo">
                <!-- parcel -->
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType">
                    <field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one>
                <if condition="boxType == null"><message>Package has no box type, skipping</message><continue/></if>

                <set field="dimUom" from="boxType.dimensionUom"/>
                <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null">
                    <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package</message><continue/></if>
                <entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom">
                    <field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one>
                <set field="weight" from="packageInfo.weight ?: boxType.defaultGrossWeight"/>
                <if condition="!weight || weightUom == null">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package</message><continue/></if>

                <set field="distance_unit" from="IN"/>
                <set field="description" from="Package"/>
                <set field="packagingType" from="[code:'02', description:description]"/>
                <set field="dimensions" from="[UnitOfMeasurement[Code:distance_unit],length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight]"/>
                <set field="packageWeight" from="[UnitOfMeasurement[Code:'LBS'],weight:weight]"/>

                <set field="parcel" from="[packagingType:packagingType,dimensions:dimensions,packageWeight:packageWeight]"/>

                <set field="requestMap" from="[:]"/>
                <set field="path" value="rating/Rate"/>

                <!-- Create RateRequest sub Map of requestMap -->
                <set field="requestMap" from="[Request[Subversion:'1703',TransactionReference:[CustomerContext:'']]]"/>

                <!--create Shipment Map with sub maps of ShipmentRatingOptions, Shipper, ShipTo, ShipFrom, Service and ShipmentTotalWeight-->
                <set field="shipmentRatingOptions" from="[UserLevelDiscountIndicator:'TRUE']"/>
                <set field="shipper" from="[Name:'Billy Blanks',ShipperNumber:'82Y3E6']"/>
                <set field="shipTo" from="address_to"/>
                <set field="shipFrom" from="address_from"/>
                <set field="service" from="[Code:'03',Description:'Ground']"/>
                <set field="shipmentTotalWeight" from="[UnitOfMeasurement[Code:'LBS',Description:'Pounds'],Weight:weight]"/>

                <!-- assemble the full Shipment Map -->
                <set field="shipment" from="[shipmentRatingOptions:shipmentRatingOptions,shipper:shipper,shipTo:shipTo,shipFrom:shipFrom,service:service,shipmentTotalWeight:shipmentTotalWeight]"/>

                <!-- assemble the full request Map -->
                <set field="requestMap" from="[RateRequest:request,Shipment:shipment,Package:parcel]"/>
            </iterate>

        </actions>
    </service>

</services>